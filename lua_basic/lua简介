1.lua 语言简述:
	lua 语言是一个嵌入式脚本, 支持内嵌到c/c++程序中;
	lua 奉行拿来主义, 开箱即用, 无序画蛇添足自建编程库;
	lua 有虚拟机gc自动回收变量, 所以编码时要尽量符合gc重用标准, 提高gc中的变量复用率;
	lua 报错能精确到行号, 变量值需要自己逐个打印;
	lua 是一个自上而下读取, 边解析, 边运行, 单线程脚本(协程并不是多线程的);
	lua 没有int 整形数据类型, 所有数字都是double 类型;
	lua 只有'double / 字符串'两种常用的数据类型, 没有指针;
	lua 编程中, local math_t = require("math"); 实际上local math_t 返回的也是一个lua table(哈希);

	lua 源码容易被反编译, 信息安全保护难度大, 需要用luac 编译出二进制代码, 然后再用aes 对二进制代码进行加密, 防止设计泄漏;
	lua 应用在: 
		* openwrt 路由器系统, 
		* openresty http proxy 互联网系统,
		* luaos 嵌入式系统, 
		* cocos2dx 2d游戏前端/后端(游戏行业很火), 
	但由于lua 的信息安全保护难度大, 其实也是挺麻烦, 反倒go 语言貌似更方便, 编译出来就是二进制代码, 想偷设计比较难;

	lua 代码社区的局限性较大, 比较零散, 也是一个不小的挑战, 甚至影响到lua 的产业发展, 只能做一些简单计算的业务, 复杂计算还是python 的天下;
	lua 的市场会渐渐被go 语言蚕食, 但lua 的便捷性, 可移植性, 一直是下游国家最青睐的原因, go 也是美产大型编程语言, 命运掌握在人家手上, 安全性不算很高;
	lua 很小, 可以轻松重写, 拷贝, 基本上没有太大的封杀可能性, 但抄袭, 剽窃, 也是很难防止, 既是优点, 也是弱点;





2.lua table 的使用:
	lua table 实际上是一个hash 结构, 无论存放浮点double, 还是字符串, 还是函数API, 都是以哈希结构来存放的;
	[] 下标直接索引, 实际上是利用哈希高性能的索引特性, 但绝对不等同于'array数组下标索引'那么高效, 只是可以媲美, 不能对等, 比红黑树索引快.



