//lua 编程的三个头文件(包含了全部的功能)
#include <lua.h>
#include <lauxlib.h>
#include <lualib.h>



//1.压入元素到lua 栈里
void lua_pushnil(lua_State *L);
void lua_pushboolean(lua_State *L, int bool);//c 语言里面不用
void lua_pushnumber(lua_State *L, double n);
void lua_pushlstring(lua_State *L, const char *s, size_t length);//字符串
void lua_pushstring(lua_State *L, const char *s);//字符串
void lua_pushcfunction(lua_State *L, lua_CFunction fn);
void lua_pushcclosure(lua_State *L, lua_CFunction fn, int n);

void lua_newtable(lua_State *L);//table
void lua_settable(lua_State *L, int index);

void *lua_newuserdata(lua_State *L, size_t size);//指针-内存块

int luaL_newmetatable(lua_State *L, const char *tname);//元表
int lua_setmetatable(lua_State *L, int index);



//2.判断lua 栈中数据元素的数据类型(只做判断, 不会pop 栈中的元素, 相当于窥探)
int lua_isnil(lua_State *L, int index);
int lua_isboolean(lua_State *L, int index);
int lua_isnumber(lua_State *L, int index);
int lua_isstring(lua_State *L, int index);
int lua_isfunction(lua_State *L, int index);//判断lua_stack 是不是一个函数
int lua_istable(lua_State *L, int index);
int lua_isuserdata(lua_State *L, int index);
int lua_islightuserdata(lua_State *L, int index);
int lua_isthread(lua_State *L, int index);



//3.对栈中的元素进行数据转换
int lua_toboolean(lua_State *L, int index);//c 里面并没有boolean, 0 就是false
double lua_tonumber(lua_State *L, int index);
const char *lua_tostring(lua_State *L, int index);
const char *lua_tolstring(lua_State *L, int idx, size_t *len);
size_t lua_strlen(lua_State *L, int index);//luajit 没有这个API
lua_CFunction lua_tocfunction(lua_State *L, int idx);
void *lua_touserdata(lua_State *L, int idx);
lua_State *lua_tothread(lua_State *L, int idx);



//4.lua 栈的维护操作
int lua_gettop(lua_State *L);
void lua_settop(lua_State *L, int index);
void lua_pushvalue(lua_State *L, int index);
void lua_remove(lua_State *L, int index);
void lua_insert(lua_State *L, int index);
void lua_replace(lua_State *L, int index);
int lua_checkstack(lua_State *L, int extra);
int lua_pop(L,n);



