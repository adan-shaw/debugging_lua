--
--0.luajit工作模式:
--
luajit中存在两种工作模式,分别如下:
	1.jit模式:
		也就是即时编译(just in time)模式. 
		该模式下会将代码直接翻译成机器码, 并向操作系统申请可执行内存空间来存储转换后的机器码. 
		执行时直接执行机器码就行, 所以效率是最高的. 
		但iOS,xbox,ps4等平台鉴于自身安全原因,都是不授权分配可执行内存空间的,
		所以iOS,xbox,ps4这些平台下就不能使用jit模式. 


	2.interpreter模式(传统lua兼容模式,只是类似python 生成pyc一样,稍微加强一下而已):
		也就是翻译器模式. 
		该模式下会将代码先翻译成字节码, 然后将字节码翻译成机器码, 
		所以无需像操作系统申请可执行内存空间,
		所以几乎所有平台都支持这种模式. 
		但是性能相比jit模式而言还是有一定差距的.


luajit采用trace compiler方案, 也就是追踪编译方案. 
luajit都会先用interpreter模式将代码转换成字节码.
然后在支持jit的平台上, 将经常执行的代码, 自动记录模型, 
并记录这些代码实际运行每一步的细节, 最后被luajit优化以及jit化.
(简单来说: luajit 是自动开启jit模式, 进行代码优化的, 可以显式关闭)


显示关闭jit模式(即开启interpreter模式方式):
if jit then
	jit.off()
	jit.flush()
end


ps:
	luajit 只适合在某些高运算的场合(可以开启jit 模式), 
	而部分多功能场合, 还是要使用interpreter模式(即与传统lua 兼容的模式),
	但interpreter模式, 仍然比传统lua 要快.








--
--1.可以使用jit 模式的判别(jit失败情况)
--
并不是所有lua代码, 都可以被jit处理的, 以下情况就会造成jit代码失败:
一.可供执行的内存空间被耗尽:
	 针对arm平台有个限制就是跳转指令只能前后跳转32m,
	 所以必须至少保证64m的空间被用来存储jit处理后的机器代码.
	 如果这64m中有任何一点内存被用作他用就会出现内存空间不足而造成jit代码失败. 
	 这种情况的优化建议如下:
		1.在android工程的Activity入口中就加载luajit,做好内存分配,
			然后将这个luasate传递给unity使用. 
		2.减少lua代码,进而减少lua内存大小,
			使其编译的机器码可以完整的存放在分配的可执行内存中. 
		3.禁用jit功能. 


二.可供使用的寄存器不足:
	 针对arm平台下, 可供使用的寄存器数量会远远低于x86平台,
	 而lua中的lua变量就是存储在寄存器中的,
	 当local变量越多, 或者local变量调用层级越深,
	 造成local变量生命周期变长, 而不能及时回收而间接增加local变量个数,
	 都会使寄存器的使用个数变多,
	 这样就容易出现寄存器不足而造成jit代码失败的情况. 这种情况的优化建议如下:
		1.减少local变量的使用个数. 
		2.不要过深层次的调用local变量.
			可以通过do ... end来限制local变量的生命周期. 


三.调用c相关的函数:
	 直接调用c的代码, 不能被jit化的. 这种情况的优化建议如下:
		1.使用luajit中提供的ffi工具来调用c相关代码, 这样就可以被jit化. 
		2.使用luajit 2.1.0beta2版本中的trace switch功能,
			将c代码独立出来, 从而将可以jit的代码进行jit处理. 
			但是效果有限且不是很明显. 


四.不支持的字节码:
	 有非常多bytecode或者内部库调用是无法jit化的, 
	 最典型就是for in pairs, 以及字符串连接符. 
	 常见的不能jit处理的对比列表如以下链接, 凡是标记2.1以及yes的都尽量少用, 最好不用. 
	 ./web网文/luajit与NYI.html

	 如何找出自己代码里有多少NYI?
	 可以在init_by_lua中添加以下两行代码:
		local v = require "jit.v"
		v.on("./jit.log")
	 (通过log 日志的模式, 查看不兼容luajit的代码有哪些)


五.jit失败判定:
	 我们可以使用luajit目录下的v.lua文件进行查看是否jit代码失败,代码如下:
		local verbo = require("jit.v")
		verbo.start()

		当你看到以下错误的时候, 说明你遇到了jit失败:
			failed to allocate mcode memory, 对应错误一
			NYI: register coalescing too complex, 对应错误二
			NYI: C function, 对应错误三
			NYI: bytecode, 对应错误四








--
--2.可被luajit优化的lua代码写法:
--
一.减少不可预测的分支代码:
	 lua jit, trace compiler的特征是:
		先运行字节码, 针对热点代码做profile, 
		了解了可以优化的点后, 再优化出最高效的机器码, 这就是luajit目前的做法.
		(简单来说就是: luajit 先将代码运行一遍, 发现if 逻辑结果可以优化的, 直接优化掉.
		 没有必要, 为了提高性能, 减少了编码的便捷性,
		 无需过多去帮jit编译器做手工优化, 这也是luajit官方的建议)
		ps:
			可以约定, 函数返回0=正确, 1=失败, 做通俗约定, 可以稍微提高一点性能.


二.尽可能使用ffi 代替lua table, 尽可能用ffi 来调用c函数:
	 luajit的ffi是一个常被大家忽略的功能, 或者只被当做一个更好用的c导出库, 
	 但事实上这是一个超级性能利器.
	 因为lua table本质是一个hash table, 
	 而ffi可以做到只分配xyz三个float的空间, 就能表示一个Vector3, 
	 自然内存占用, 要低得多, 
	 而且jit会利用ffi的信息, 实现访问xyz的时候直接读内存, 
	 而不是像hash table那样走一次key hash, 性能也高得多. 

	 不幸的是ffi只在有jit模式的时候才能有很好的运行速度, 
	 但iOS,xbox,ps4平台下, 
	 由于只能运行解释模式, ffi的性能很差(比纯table反而更慢), 仅仅内存优势得到保留, 
	 所以, 如果要考虑ios这样的平台, 这个优化点基本可以忽略.


三.for 循环体的标准写法(可以提高效率)
	 实现循环时, 最好使用简单的for i = start, stop, step do这样的写法, 或者使用ipairs, 
	 而尽量避免使用for k,v in pairs(x) do end
	 这是因为直接使用数值索引不仅更有利于循环的展开, 
	 而且也可以被jit优化来提高性能. 
	 而k, v方式在luajit的2.1.0中是不支持jit的, 
	 坊间流传是k, v方式jit优化处理时对应的汇编代码难写. 


四.变量的别名, 可能会阻止jit优化掉子表达式, 尤其是在使用多个数组的时候. 
	 作者举了一个例子:
		x[i] = a[i] + c[i];
		y[i] = a[i] + d[i];
	 我们可能会认为两a[i]是同一个东西, 编译器可以优化成:
		local t = a[i];
		x[i] = t + c[i];
		y[i] = t + d[i];
	 实则不然, 因为可能会出现, x和a就是同一个表, 
	 这样, x[i] = a[i] + c[i]就改变了a[i]的值, 
	 那么y[i] = a[i] + d[i]就不能再使用之前的a[i]的值了.

	 这种情形的本质区别是:
		优化点9里头z/a/b都是值类型, 而这里x/a都是引用类型, 
		引用类型就有引用同一个东西的可能(变量别名), 因此编译器会放弃这样的优化. 


五.减少存活着的local临时变量的数量(尽量重复利用local 临时变量):
	 过多的存活着的临时变量, 可能会耗尽寄存器, 导致jit编译器无法利用寄存器做优化. 


六.减少使用高消耗或者不支持jit的操作: 
	 NYI(not yet implement, 意思就是, 作者还没有把这个功能做完)
	 最常见的有:
		for k, v in pairs(x):
			主要是pairs是无jit实现的, 尽可能用ipairs替代. 
		print():
			这个是非jit化的, 作者建议用io.write. 
		字符串连接符:
			打日志很容易会写log("haha"..x)这样的方式, 
			然后通过屏蔽log的实现来避免消耗. 
			事实上真的可以屏蔽掉吗?
			然并卵. 
			因为"haha"..x 这个字符串链接依然会被执行. 
			2.0.x的时候这个代码还不支持jit, 
			2.1.x虽然终于支持了, 
			但多余的连接字符串运算以及内存分配依然发生了, 
			所以想要屏蔽, 可以用log("haha %s", x)这样的写法.
		table.insert:
			目前只有从尾部插入table, 才是jit实现的, 
			如果从其他地方插入table, 会跳转到c实现. 



